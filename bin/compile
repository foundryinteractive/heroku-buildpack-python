#!/usr/bin/env bash

# Usage:
#
#     $ bin/compile <build-dir> <cache-dir>


# Fail fast and fail hard.
set -eo pipefail

# Prepend proper path for virtualenv hackery. This will be deprecated soon.
export PATH=:/usr/local/bin:$PATH

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2

CACHED_DIRS=".heroku"

# Static configurations for virtualenv caches.
LEGACY_VIRTUALENV_LOC="."
VIRTUALENV_LOC=".heroku/venv"
MODERN_VIRTUALENV_LOC=".heroku/venv"
LEGACY_TRIGGER="lib/python2.7"
LEGACY_VIRTUALENV_TRIGGER="lib/python2.7"
LEGACY_VIRTUALENV_DIRS="bin include lib"
PROFILE_PATH="$BUILD_DIR/.profile.d/python.sh"

# Python version. This will be used in the future to specify custom Pythons.
DEFAULT_PYTHON_VERSION="python-2.7.3"
PYTHON_EXE="/app/.heroku/python/bin/python"

# Sanitizing environment variables.
unset GIT_DIR PYTHONHOME PYTHONPATH LD_LIBRARY_PATH LIBRARY_PATH

# We'll need to send these statics to other scripts we `source`.
export BUILD_DIR CACHE_DIR BIN_DIR PROFILE_PATH

# Syntax sugar.
source $BIN_DIR/utils

# Directory Hacks for path consistiency.
APP_DIR='/app'
TMP_APP_DIR=$CACHE_DIR/tmp_app_dir

# Copy Anvil app dir to temporary storage...
mkdir -p $TMP_APP_DIR
deep-mv $APP_DIR $TMP_APP_DIR

# Copy Application code in.
deep-mv $BUILD_DIR $APP_DIR

# Set new context.
ORIG_BUILD_DIR=$BUILD_DIR
BUILD_DIR=$APP_DIR

# Prepend proper path buildpack use.
export PATH=$BUILD_DIR/.heroku/python/bin:$PATH
export PYTHONUNBUFFERED=1
export LANG=en_US.UTF-8
export LIBRARY_PATH=/app/.heroku/vendor/lib
export LD_LIBRARY_PATH=/app/.heroku/vendor/lib

# Syntax sugar.
indent() {
  RE="s/^/       /"
  [ $(uname) == "Darwin" ] && sed -l "$RE" || sed -u "$RE"
}

function virtualenv (){
  python "$ROOT_DIR/vendor/virtualenv-1.7/virtualenv.py" "$@"
}

function puts-step (){
  echo "-----> $@"
}

function puts-warn (){
  echo " !     $@"
}

# Switch to the repo's context.
cd $BUILD_DIR

# Experimental pre_compile hook.
source $BIN_DIR/steps/hooks/pre_compile

# If no requirements given, assume `setup.py develop`.
if [ ! -f requirements.txt ]; then
  puts-step "No requirements.txt provided; assuming dist package."
  echo "-e ." > requirements.txt
fi

# If no runtime given, assume default version.
if [ ! -f runtime.txt ]; then
  puts-step "No runtime.txt provided; assuming $DEFAULT_PYTHON_VERSION."
  echo $DEFAULT_PYTHON_VERSION > runtime.txt
fi

# ### The Cache
mkdir -p $CACHE_DIR

# Nice defaults.
LEGACY_VIRTUALENV=false
VIRTUALENV_LOC=$MODERN_VIRTUALENV_LOC

# Support "old-style" virtualenvs.
if [ -d $CACHE_DIR/$LEGACY_VIRTUALENV_TRIGGER ]; then
  LEGACY_VIRTUALENV=true
  VIRTUALENV_LOC=$LEGACY_VIRTUALENV_LOC
  CACHED_DIRS=$LEGACY_VIRTUALENV_DIRS

  # Warn for a checked-in virtualenv.
  if [ -d "lib" ] || [ -d "bin" ]; then
    puts-warn "You have a virtualenv checked in. You should ignore the appropriate paths in your repo. See http://devcenter.heroku.com/articles/gitignore for more info.";
  fi

  # Reject a conflicting checked-in virtualenv.
  if [ -f "lib/python2.7" ]; then
    puts-warn "Checked-in virtualenv conflict."
    exit 1;
  fi
fi

# Purge "old-style" virtualenvs.
[ -d $CACHE_DIR/$LEGACY_TRIGGER ] && rm -fr $CACHE_DIR/.heroku/bin $CACHE_DIR/.heroku/lib $CACHE_DIR/.heroku/include
[ -d $CACHE_DIR/$VIRTUALENV_LOC ] && rm -fr $CACHE_DIR/.heroku/venv $CACHE_DIR/.heroku/src

# Restore old artifacts from the cache.
for dir in $CACHED_DIRS; do
  cp -R $CACHE_DIR/$dir . &> /dev/null || true
done

# Install SWIG
if [ ! -d $CACHE_DIR/swig ]; then
  cd $BUILD_DIR
  echo "-----> Fetching and installing SWIG 2"
  curl -O https://s3.amazonaws.com/guybowden/swig.tar.gz >/dev/null 2>&1
  echo "-----> Installing ..."
  tar xzvf swig.tar.gz >/dev/null 2>&1
  mv swig $CACHE_DIR/swig
  rm swig.tar.gz
  echo "SWIG installed" | indent
fi

mkdir -p .paybox
cp -R $CACHE_DIR/swig .paybox

echo "updating path..." | indent
PATH=$PATH:$BUILD_DIR/.paybox/swig/bin/
export PATH
echo $PATH | indent
echo "setting SWIG_LIB environment var"
export SWIG_LIB=$BUILD_DIR/.paybox/swig/share/swig/2.0.5/

set +e
# Create set-aside `.heroku` folder.
mkdir .heroku &> /dev/null
set -e

mkdir -p $(dirname $PROFILE_PATH)

set +e
PYTHON_VERSION=$(cat runtime.txt)

# Install Python.
if [ -f .heroku/python-version ]; then
  if [ ! $(cat .heroku/python-version) = $PYTHON_VERSION ]; then
    puts-step "Found $(cat .heroku/python-version), removing."
    rm -fr .heroku/python
  else
    SKIP_INSTALL=1
  fi
fi


if [ ! "$SKIP_INSTALL" ]; then
  puts-step "Preparing Python runtime ($PYTHON_VERSION)"
  curl http://envy-versions.s3.amazonaws.com/$PYTHON_VERSION.tar.bz2 -s | tar jx &> /dev/null
  if [[ $? != 0 ]] ; then
    puts-warn "Requested runtime ($PYTHON_VERSION) was not found."
    puts-warn "Aborting.  More info: https://devcenter.heroku.com/articles/python-support"
    exit 1
  fi
  mv python .heroku/python

  # Record for future reference.
  echo $PYTHON_VERSION > .heroku/python-version
  WORKING_DIR=$(pwd)

  # Prepare it for the real world
  puts-step "Installing Distribute (0.6.34)"
  cd $ROOT_DIR/vendor/distribute-0.6.34/
  python setup.py install  &> /dev/null
  cd $WORKING_DIR

  puts-step "Installing Pip (1.2.1)"
  cd $ROOT_DIR/vendor/pip-1.2.1/
  python setup.py install  &> /dev/null
  cd $WORKING_DIR

  hash -r
else
  puts-step "Using Python runtime ($PYTHON_VERSION)"
fi

# Try to create the virtualenv.
OUT=$(virtualenv --python $PYTHON_EXE --distribute --never-download --prompt='(venv) ' $VIRTUALENV_LOC 2>&1)

[ $? -ne 0 -o -n "$CLEAN_VIRTUALENV" ] && {
  if [ -n "$CLEAN_VIRTUALENV" ]
    then echo " !     CLEAN_VIRTUALENV set, rebuilding virtualenv."
    else echo " !     Virtualenv corrupt, rebuilding."
  fi
  # If the virtualenv is old-style, the new one won't be
  if $LEGACY_VIRTUALENV; then
    # Remove old artifacts in cache.
    for dir in $CACHED_DIRS; do
      rm -rf $CACHE_DIR/$dir
    done
    VIRTUALENV_DIRS=$LEGACY_VIRTUALENV_DIRS
    VIRTUALENV_LOC=$MODERN_VIRTUALENV_LOC
    CACHED_DIRS=".heroku"
    LEGACY_VIRTUALENV=false
  else
    VIRTUALENV_DIRS=$MODERN_VIRTUALENV_LOC
  fi
  VIRTUALENV_SRC_DIR=$MODERN_VIRTUALENV_LOC/../src
  if [ -d "$VIRTUALENV_SRC_DIR" ]; then
    echo " !     DELETING $VIRTUALENV_SRC_DIR"
    rm -fr "$VIRTUALENV_SRC_DIR" &> /dev/null || true
  fi
  for dir in $VIRTUALENV_DIRS; do
    rm -fr $dir &> /dev/null || true
  done
  OUT=$(virtualenv --python $PYTHON_EXE --distribute --never-download  --prompt='(venv) ' $VIRTUALENV_LOC )
}
echo "$OUT" | indent

set -e

# Pylibmc support.
# See [`bin/steps/pylibmc`](pylibmc.html).
source $BIN_DIR/steps/pylibmc

# Activate the Virtualenv.
puts-step "Activating virtualenv"
source $VIRTUALENV_LOC/bin/activate

# Install Mercurial if it appears to be required.
if (grep -Fiq "hg+" requirements.txt) then
  pip install --use-mirrors mercurial | cleanup | indent
fi

# Install dependencies with Pip.
puts-step "Installing dependencies using Pip (1.2.1)"
pip install --use-mirrors -r requirements.txt --exists-action=w --src=./.heroku/src | cleanup | indent

# Django collectstatic support.
source $BIN_DIR/steps/collectstatic

# Make Virtualenv's paths relative for portability.
set +e
OUT=$(virtualenv --python $PYTHON_EXE  --relocatable $VIRTUALENV_LOC)
[ $? -ne 0 ] && {
  puts-warn "Error making virtualenv relocatable"
  echo "$OUT" | indent
  exit 1
}
set -e

# ### Finalize
#

# Store new artifacts in cache.
for dir in $CACHED_DIRS; do
  rm -rf $CACHE_DIR/$dir
  cp -R $dir $CACHE_DIR/
done

# Set context environment variables.
set-env PATH '$HOME/.heroku/python/bin:$PATH'
set-env PYTHONUNBUFFERED true
set-env PYTHONHOME /app/.heroku/python
set-default-env LIBRARY_PATH /app/.heroku/vendor/lib
set-default-env LD_LIBRARY_PATH /app/.heroku/vendor/lib
set-default-env LANG en_US.UTF-8
set-default-env PYTHONHASHSEED random
set-default-env PYTHONPATH /app/


# Experimental post_compile hook.
source $BIN_DIR/steps/hooks/post_compile

# ### Fin.

deep-mv $BUILD_DIR $ORIG_BUILD_DIR
deep-mv $TMP_APP_DIR $APP_DIR
